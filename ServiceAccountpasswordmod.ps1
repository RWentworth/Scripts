#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 91a859d7-4b64-479b-9c48-f53b1ea19d7b
# Source File: ServiceAccountPassword.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
GFWuL5Kvdxz8HxZ8ZEvtUQAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.74
     Generated on:       11/14/2014 11:49 AM
     Generated by:       jackte
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2014
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	
	return $true #return true for success or false for failure
	
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-ServiceAccountPassword_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formChangeServiceAccount = New-Object 'System.Windows.Forms.Form'
	$logrichtextbox = New-Object 'System.Windows.Forms.RichTextBox'
	$serviceGroup = New-Object 'System.Windows.Forms.GroupBox'
	$newpassbox = New-Object 'System.Windows.Forms.TextBox'
	$confnewpassbox = New-Object 'System.Windows.Forms.TextBox'
	$labelConfirmPassword = New-Object 'System.Windows.Forms.Label'
	$startbutton = New-Object 'System.Windows.Forms.Button'
	$labelNewPassword = New-Object 'System.Windows.Forms.Label'
	$startusertextbox = New-Object 'System.Windows.Forms.TextBox'
	$labelStartupName = New-Object 'System.Windows.Forms.Label'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$labelName = New-Object 'System.Windows.Forms.Label'
	$dnameservicetext = New-Object 'System.Windows.Forms.TextBox'
	$nameservicetxtbox = New-Object 'System.Windows.Forms.TextBox'
	$serviceslistbox = New-Object 'System.Windows.Forms.ListBox'
	$getServicesbutton = New-Object 'System.Windows.Forms.Button'
	$labelSelectServiceToModif = New-Object 'System.Windows.Forms.Label'
	$buttonSaveAdminfail = New-Object 'System.Windows.Forms.Button'
	$buttonSavePingFail = New-Object 'System.Windows.Forms.Button'
	$labelAdminRightsFailed = New-Object 'System.Windows.Forms.Label'
	$noadminlistbox = New-Object 'System.Windows.Forms.ListBox'
	$labelPingFailed = New-Object 'System.Windows.Forms.Label'
	$nopinglistbox = New-Object 'System.Windows.Forms.ListBox'
	$logbuttonbrowse = New-Object 'System.Windows.Forms.Button'
	$logtextbox = New-Object 'System.Windows.Forms.TextBox'
	$labelLogFile = New-Object 'System.Windows.Forms.Label'
	$ValConBUT = New-Object 'System.Windows.Forms.Button'
	$addManBUT = New-Object 'System.Windows.Forms.Button'
	$ManSerTBX = New-Object 'System.Windows.Forms.TextBox'
	$labelServerList = New-Object 'System.Windows.Forms.Label'
	$serverlistbox = New-Object 'System.Windows.Forms.CheckedListBox'
	$labelServersFile = New-Object 'System.Windows.Forms.Label'
	$serlstbuttonBrowse = New-Object 'System.Windows.Forms.Button'
	$serlsttextbox = New-Object 'System.Windows.Forms.TextBox'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$savefiledialog1 = New-Object 'System.Windows.Forms.SaveFileDialog'
	$timerFadeIn = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	
	
	
	
	
	
	function popup ($message)
	{
		[Windows.Forms.MessageBox]::Show($message)
		[Windows.Forms.MessageBoxButtons]::OK
	
	}
	
	function log-start
	{
		$logpath = Split-Path $logtextbox.Text
		$logfile = Split-Path $logtextbox.Text -Leaf
		$logfull = $logtextbox.Text
		if ((Test-Path -Path $logfull)) { Remove-Item -Path $logfull -Force }
		New-Item -Path $logpath -Value $logfile -ItemType file
		Add-Content -Path $logfull -Value ("[$([DateTime]::Now)] `t Begin Logging`n")
		$logrichtextbox.text = $logrichtextbox.Text + ("[$([DateTime]::Now)] `t Begin Logging`n")
	}
	
	function result($rescode)
	{
		switch ($rescode)
		{
			0 { ($result = "The Request Was Accepted") }
			1 { ($result = "The request is not supported.") }
			2 { ($result = "The user did not have the necessary access.") }
			3 { ($result = "The service cannot be stopped because other services that are running are dependent on it.") }
			4 { ($result = "The requested control code is not valid, or it is unacceptable to the service.") }
			5 { ($result = "The requested control code cannot be sent to the service because the state of the service (Win32_BaseService State property) is equal to 0, 1, or 2.") }
			6 { ($result = "The service has not been started.") }
			7 { ($result = "The service did not respond to the start request in a timely fashion.") }
			8 { ($result = "Unknown failure when starting the service.") }
			9 { ($result = "The directory path to the service executable file was not found.") }
			10 { ($result = "The service is already running.") }
			11 { ($result = "The database to add a new service is locked.") }
			12 { ($result = "A dependency this service relies on has been removed from the system.") }
			13 { ($result = "The service failed to find the service needed from a dependent service.") }
			14 { ($result = "The service has been disabled from the system.") }
			15 { ($result = "The service does not have the correct authentication to run on the system.") }
			16 { ($result = "This service is being removed from the system.") }
			17 { ($result = "The service has no execution thread.") }
			18 { ($result = "The service has circular dependencies when it starts.") }
			19 { ($result = "A service is running under the same name.") }
			20 { ($result = "The service name has invalid characters.") }
			21 { ($result = "Invalid parameters have been passed to the service.") }
			22 { ($result = "The account under which this service runs is either invalid or lacks the permissions to run the service.") }
			23 { ($result = "The service exists in the database of services available from the system.") }
			24 { ($result = "The service is currently paused in the system.") }
		}
		log-me $result
	}
	
	
	function log-me ($value) {
		$logfull = $logtextbox.Text
		Add-Content -Path $logfull -Value ("[$([DateTime]::Now)] `t$value`n")
		$logrichtextbox.text = $logrichtextbox.Text + ("[$([DateTime]::Now)] `t$value`n")
	}
	
	$formChangeServiceAccount_FadeInLoad={
		#Start the Timer to Fade In
		$timerFadeIn.Start()
		$formChangeServiceAccount.Opacity = 0
		$Invocation = (Get-Variable MyInvocation -Scope 1).Value
		$scriptpath = Split-Path $Invocation.MyCommand.Path
		$logtextbox.Text = ("$scriptpath\sachangelog.log")
		log-start
	}
	
	$timerFadeIn_Tick={
		#Can you see me now?
		if($formChangeServiceAccount.Opacity -lt 1)
		{
			$formChangeServiceAccount.Opacity += 0.1
			
			if($formChangeServiceAccount.Opacity -ge 1)
			{
				#Stop the timer once we are 100% visible
				$timerFadeIn.Stop()
			}
		}
	
	}
	
	$serlstbuttonBrowse_Click={
	
		if($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$serlsttextbox.Text = $openfiledialog1.FileName
			$logpath = (Split-Path -Path $openfiledialog1.FileName)
		}
	}
	
	
	
	
	
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	
	
	
	$ManSerTBX_Click={
		#TODO: Place custom script here
		$ManSerTBX.Text = ""
		$addManBUT.Enabled=$true
	}
	
	$addManBUT_Click={
		#TODO: Place custom script here
		$serverlistbox.Items.Add($ManSerTBX.Text, $true)
		$manserver = $ManSerTBX.Text
		log-me ("Added $manserver to list")
	}
	
	$serlsttextbox_TextChanged={
		#TODO: Place custom script here
		$servers = Get-Content -Path $serlsttextbox.Text
		
		foreach ($server in $servers) {
			$serverlistbox.Items.Add($server, $true)
			log-me ("Added $server to list from import file")
		}
	}
	
	$ValConBUT_Click= {
		#TODO: Place custom script here
		$ValConBUT.Enabled = $false
		$ValConBUT.BackColor = 'LawnGreen'
		$nopinglistbox.Items.Clear()
		$noadminlistbox.Items.Clear()
		$i = ($serverlistbox.items.Count - 1)
		$servers = $serverlistbox.checkeditems
		log-me("Validating Process Started")
		
		foreach ($server in $servers)
		{
			$testpath = "\\$server\c$"
			$ValConBUT.Text = ("Validating $Server")
			log-me ("Validating $Server")
			# Write-Host $testpath
			if (Test-Connection -ComputerName $server -count 2 -Quiet -ErrorAction 'SilentlyContinue')
			{
				
				If ((Test-Path -Path $testpath -ErrorAction 'SilentlyContinue') -eq $false)
				{
					$noadminlistbox.Items.Add($server)
					log-me ("Admin Access testFailed to $server")
					
					
				}
				
			}
			else
			{
				$nopinglistbox.Items.Add($server)
				log-me ("Ping Test failed to $server")
				
				
			}
			$i = $i++
			
		}
		$ValConBUT.Enabled = $true
		$ValConBUT.BackColor = 'Control'
		$ValConBUT.Text = 'Validate Connections'
		If ($nopinglistbox.Items.Count -gt 0)
		{
			$buttonSavePingFail.Visible = $true
			$pingfailedlist = $nopinglistbox.Items
	
			foreach ($system in $pingfailedlist)
			{			
				$i=$serverlistbox.Items.IndexOf($system)
				$serverlistbox.SetItemChecked($i, $false)
				log-me ("Unchecking $system due to ping failure")
			}
			if ($noadminlistbox.Items.Count -gt 0) { $buttonSaveAdminfail.Visible = $true }
			log-me ("Validation Process Complete")
		}
		If ($noadminlistbox.Items.Count -gt 0)
		{
			$buttonSaveAdminFail.Visible = $true
			$adminfailedlist = $noadminlistbox.Items
			
			foreach ($system in $adminfailedlist)
			{
				$i = $serverlistbox.Items.IndexOf($system)
				$serverlistbox.SetItemChecked($i, $false)
				log-me ("Unchecking $system due to admin failure")
			}
		
			log-me ("Validation Process Complete")
		}
	}
	
	
	
	
	
	
	
	$buttonBrowse2_Click={
	
		if($openfiledialog2.ShowDialog() -eq 'OK')
		{
			$textboxFile2.Text = $openfiledialog2.FileName
		}
	}
	
	
	$form1_FadeInLoad2={
		#Start the Timer to Fade In
		$timerFadeIn.Start()
		$formChangeServiceAccount.Opacity = 0
	}
	$logbuttonbrowse_Click={
		#TODO: Place custom script here
			If ($savefiledialog1.ShowDialog() -eq 'OK')
			{
			$logtextbox.Text = $savefiledialog1.FileName
			log-me 
			}
		}
	
	$buttonSavePingFail_Click={
		#TODO: Place custom script here
		$savepath = (Split-Path -Path $logtextbox.text)
		$nopinglistbox.Items | Out-File -FilePath "$savepath\pingfail.txt"
		popup ("File Saved to $savepath\pingfail.txt")
	}
	
	$buttonSaveAdminfail_Click = {
		$savepath = (Split-Path -Path $logtextbox.text)
		$noadminlistbox.items | Out-File -FilePath "$savepath\adminfail.txt"
		popup ("File Saved to $savepath\adminfail.txt")
	}
	$getServicesbutton_Click = {
		$serviceslistbox.Items.Clear()
		#TODO: Place custom script here
		$refserver = $serverlistbox.SelectedItem
		$squery = "Select Name from win32_service"
		$services = Get-WmiObject -ComputerName $refserver -Query $squery
		foreach ($service in $services) { $serviceslistbox.Items.Add($service.name) }
	}
	
	$serverlistbox_SelectedValueChanged={
		#TODO: Place custom script here
		$getServicesbutton.Enabled = $true
	}
	
	
	
	$serviceslistbox_SelectedIndexChanged={
		#TODO: Place custom script here
		#$nameservicetxtbox = $serviceslistbox.SelectedItem
		$selectedservice = $serviceslistbox.selecteditem
		$nameservicetxtbox.Text = $selectedservice
		 $refserver
	#	Write-Host $selectedservice
	$serviceprop = Get-WmiObject win32_service -computername $refserver -filter "name='$selectedservice'"
		$serviceprop
		# Write-Host$dnameservicetext.Text = $Serviceprop.displayname
		$startusertextbox.Text = $serviceprop.startname
	}
	
	$newpassbox_TextChanged={
		#TODO: Place custom script here
		if ($newpassbox.Text -ne $confnewpassbox.Text)
		{
			$newpassbox.BackColor = 'red'
			$confnewpassbox.BackColor = 'Red'
			$startbutton.Enabled=$false
		}
		else
		{
			$newpassbox.BackColor = 'window'
			$confnewpassbox.BackColor = 'window'
			$startbutton.Enabled=$true
		}
	}
	
	
	$confnewpassbox_TextChanged={
		#TODO: Place custom script here
		if ($newpassbox.Text -ne $confnewpassbox.Text)
		{
			$newpassbox.BackColor = 'red'
			$confnewpassbox.BackColor = 'Red'
			$startbutton.Enabled=$false
			
		}
		else
		{
			$newpassbox.BackColor = 'window'
			$confnewpassbox.BackColor = 'window'
			$startbutton.Enabled=$true
		}
	
	}
	
	
	
	
	$startbutton_Click = {
		$serverstochange = $serverlistbox.CheckedItems
		$newpassword = $newpassbox.Text
		
		
		foreach ($server in $serverstochange)
		{
			log-me ("Changing $selectedservice")
			$Servicetochange = Get-WmiObject win32_service -computername $Server -filter "name='$selectedservice'"
			$stopservice = $Servicetochange.stopservice()
			log-me "Stopping Service on $Server - Result Code:$result "
			result($stopservice.returnvalue)
			do
			{
				Start-Sleep -Seconds 5
				$Servicecheck = Get-WmiObject win32_service -computername $Server -filter "name='$selectedservice'"
				$state = $Servicecheck.Started
				# Write-Host $state
			} until($state="False")
			
			$ChangeStatus = $Servicetochange.change($null, $null, $null, $null, $null, $null, $Null, $newpassword, $null, $null, $null)
			log-me "Changing Password on $Server - Result Code: "
			result($ChangeStatus.returnvalue)
			Start-Sleep -Seconds 5
			$startstatus = $Servicetochange.startservice()
			log-me "Starting Service on $Server - Result Code:"
			result($startstatus.returnvalue)
			
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formChangeServiceAccount.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$newpassbox.remove_TextChanged($newpassbox_TextChanged)
			$confnewpassbox.remove_TextChanged($confnewpassbox_TextChanged)
			$startbutton.remove_Click($startbutton_Click)
			$serviceslistbox.remove_SelectedIndexChanged($serviceslistbox_SelectedIndexChanged)
			$getServicesbutton.remove_Click($getServicesbutton_Click)
			$buttonSaveAdminfail.remove_Click($buttonSaveAdminfail_Click)
			$buttonSavePingFail.remove_Click($buttonSavePingFail_Click)
			$logbuttonbrowse.remove_Click($logbuttonbrowse_Click)
			$ValConBUT.remove_Click($ValConBUT_Click)
			$addManBUT.remove_Click($addManBUT_Click)
			$ManSerTBX.remove_Click($ManSerTBX_Click)
			$serverlistbox.remove_SelectedValueChanged($serverlistbox_SelectedValueChanged)
			$serlstbuttonBrowse.remove_Click($serlstbuttonBrowse_Click)
			$serlsttextbox.remove_TextChanged($serlsttextbox_TextChanged)
			$formChangeServiceAccount.remove_Load($formChangeServiceAccount_FadeInLoad)
			$timerFadeIn.remove_Tick($timerFadeIn_Tick)
			$formChangeServiceAccount.remove_Load($Form_StateCorrection_Load)
			$formChangeServiceAccount.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formChangeServiceAccount.SuspendLayout()
	$serviceGroup.SuspendLayout()
	#
	# formChangeServiceAccount
	#
	$formChangeServiceAccount.Controls.Add($logrichtextbox)
	$formChangeServiceAccount.Controls.Add($serviceGroup)
	$formChangeServiceAccount.Controls.Add($serviceslistbox)
	$formChangeServiceAccount.Controls.Add($getServicesbutton)
	$formChangeServiceAccount.Controls.Add($labelSelectServiceToModif)
	$formChangeServiceAccount.Controls.Add($buttonSaveAdminfail)
	$formChangeServiceAccount.Controls.Add($buttonSavePingFail)
	$formChangeServiceAccount.Controls.Add($labelAdminRightsFailed)
	$formChangeServiceAccount.Controls.Add($noadminlistbox)
	$formChangeServiceAccount.Controls.Add($labelPingFailed)
	$formChangeServiceAccount.Controls.Add($nopinglistbox)
	$formChangeServiceAccount.Controls.Add($logbuttonbrowse)
	$formChangeServiceAccount.Controls.Add($logtextbox)
	$formChangeServiceAccount.Controls.Add($labelLogFile)
	$formChangeServiceAccount.Controls.Add($ValConBUT)
	$formChangeServiceAccount.Controls.Add($addManBUT)
	$formChangeServiceAccount.Controls.Add($ManSerTBX)
	$formChangeServiceAccount.Controls.Add($labelServerList)
	$formChangeServiceAccount.Controls.Add($serverlistbox)
	$formChangeServiceAccount.Controls.Add($labelServersFile)
	$formChangeServiceAccount.Controls.Add($serlstbuttonBrowse)
	$formChangeServiceAccount.Controls.Add($serlsttextbox)
	$formChangeServiceAccount.AutoScaleDimensions = '96, 96'
	$formChangeServiceAccount.AutoScaleMode = 'Dpi'
	$formChangeServiceAccount.AutoScroll = $True
	$formChangeServiceAccount.AutoSize = $True
	$formChangeServiceAccount.AutoSizeMode = 'GrowAndShrink'
	$formChangeServiceAccount.BackColor = 'ControlDarkDark'
	$formChangeServiceAccount.CausesValidation = $False
	$formChangeServiceAccount.ClientSize = '1172, 939'
	$formChangeServiceAccount.Name = "formChangeServiceAccount"
	$formChangeServiceAccount.SizeGripStyle = 'Show'
	$formChangeServiceAccount.Text = "Change Service Account Password"
	$formChangeServiceAccount.add_Load($formChangeServiceAccount_FadeInLoad)
	#
	# logrichtextbox
	#
	$logrichtextbox.Location = '13, 657'
	$logrichtextbox.Name = "logrichtextbox"
	$logrichtextbox.Size = '1146, 197'
	$logrichtextbox.TabIndex = 7
	$logrichtextbox.Text = ""
	#
	# serviceGroup
	#
	$serviceGroup.Controls.Add($newpassbox)
	$serviceGroup.Controls.Add($confnewpassbox)
	$serviceGroup.Controls.Add($labelConfirmPassword)
	$serviceGroup.Controls.Add($startbutton)
	$serviceGroup.Controls.Add($labelNewPassword)
	$serviceGroup.Controls.Add($startusertextbox)
	$serviceGroup.Controls.Add($labelStartupName)
	$serviceGroup.Controls.Add($labelDisplayName)
	$serviceGroup.Controls.Add($labelName)
	$serviceGroup.Controls.Add($dnameservicetext)
	$serviceGroup.Controls.Add($nameservicetxtbox)
	$serviceGroup.Location = '838, 174'
	$serviceGroup.Name = "serviceGroup"
	$serviceGroup.Size = '321, 303'
	$serviceGroup.TabIndex = 21
	$serviceGroup.TabStop = $False
	$serviceGroup.Text = "Selected Service"
	#
	# newpassbox
	#
	$newpassbox.Location = '81, 145'
	$newpassbox.Name = "newpassbox"
	$newpassbox.PasswordChar = '*'
	$newpassbox.Size = '234, 20'
	$newpassbox.TabIndex = 13
	$newpassbox.UseSystemPasswordChar = $True
	$newpassbox.add_TextChanged($newpassbox_TextChanged)
	#
	# confnewpassbox
	#
	$confnewpassbox.Location = '81, 171'
	$confnewpassbox.Name = "confnewpassbox"
	$confnewpassbox.Size = '234, 20'
	$confnewpassbox.TabIndex = 12
	$confnewpassbox.UseSystemPasswordChar = $True
	$confnewpassbox.add_TextChanged($confnewpassbox_TextChanged)
	#
	# labelConfirmPassword
	#
	$labelConfirmPassword.Location = '6, 166'
	$labelConfirmPassword.Name = "labelConfirmPassword"
	$labelConfirmPassword.Size = '69, 29'
	$labelConfirmPassword.TabIndex = 11
	$labelConfirmPassword.Text = "Confirm Password"
	$labelConfirmPassword.TextAlign = 'MiddleCenter'
	#
	# startbutton
	#
	$startbutton.Enabled = $False
	$startbutton.Location = '81, 197'
	$startbutton.Name = "startbutton"
	$startbutton.Size = '234, 68'
	$startbutton.TabIndex = 9
	$startbutton.Text = "Change Password"
	$startbutton.UseVisualStyleBackColor = $True
	$startbutton.add_Click($startbutton_Click)
	#
	# labelNewPassword
	#
	$labelNewPassword.Location = '6, 136'
	$labelNewPassword.Name = "labelNewPassword"
	$labelNewPassword.Size = '69, 29'
	$labelNewPassword.TabIndex = 8
	$labelNewPassword.Text = "New Password"
	$labelNewPassword.TextAlign = 'MiddleCenter'
	#
	# startusertextbox
	#
	$startusertextbox.Location = '81, 93'
	$startusertextbox.Name = "startusertextbox"
	$startusertextbox.Size = '234, 20'
	$startusertextbox.TabIndex = 6
	#
	# labelStartupName
	#
	$labelStartupName.Location = '6, 89'
	$labelStartupName.Name = "labelStartupName"
	$labelStartupName.Size = '69, 29'
	$labelStartupName.TabIndex = 5
	$labelStartupName.Text = "Startup Name"
	$labelStartupName.TextAlign = 'MiddleCenter'
	#
	# labelDisplayName
	#
	$labelDisplayName.Location = '6, 60'
	$labelDisplayName.Name = "labelDisplayName"
	$labelDisplayName.Size = '69, 29'
	$labelDisplayName.TabIndex = 3
	$labelDisplayName.Text = "Display Name"
	$labelDisplayName.TextAlign = 'MiddleCenter'
	#
	# labelName
	#
	$labelName.Location = '20, 37'
	$labelName.Name = "labelName"
	$labelName.Size = '35, 23'
	$labelName.TabIndex = 2
	$labelName.Text = "Name"
	$labelName.TextAlign = 'MiddleRight'
	#
	# dnameservicetext
	#
	$dnameservicetext.Location = '81, 67'
	$dnameservicetext.Name = "dnameservicetext"
	$dnameservicetext.Size = '234, 20'
	$dnameservicetext.TabIndex = 1
	#
	# nameservicetxtbox
	#
	$nameservicetxtbox.Location = '81, 40'
	$nameservicetxtbox.Name = "nameservicetxtbox"
	$nameservicetxtbox.Size = '234, 20'
	$nameservicetxtbox.TabIndex = 0
	#
	# serviceslistbox
	#
	$serviceslistbox.FormattingEnabled = $True
	$serviceslistbox.Location = '551, 175'
	$serviceslistbox.Name = "serviceslistbox"
	$serviceslistbox.Size = '281, 381'
	$serviceslistbox.TabIndex = 20
	$serviceslistbox.add_SelectedIndexChanged($serviceslistbox_SelectedIndexChanged)
	#
	# getServicesbutton
	#
	$getServicesbutton.Enabled = $False
	$getServicesbutton.Location = '551, 559'
	$getServicesbutton.Name = "getServicesbutton"
	$getServicesbutton.Size = '281, 23'
	$getServicesbutton.TabIndex = 19
	$getServicesbutton.Text = "Retrive Services from Highlighted System"
	$getServicesbutton.UseVisualStyleBackColor = $True
	$getServicesbutton.add_Click($getServicesbutton_Click)
	#
	# labelSelectServiceToModif
	#
	$labelSelectServiceToModif.Font = "Microsoft Sans Serif, 17pt"
	$labelSelectServiceToModif.Location = '550, 111'
	$labelSelectServiceToModif.Name = "labelSelectServiceToModif"
	$labelSelectServiceToModif.Size = '263, 60'
	$labelSelectServiceToModif.TabIndex = 18
	$labelSelectServiceToModif.Text = "Select Service to Modify"
	$labelSelectServiceToModif.TextAlign = 'MiddleCenter'
	#
	# buttonSaveAdminfail
	#
	$buttonSaveAdminfail.Location = '279, 560'
	$buttonSaveAdminfail.Name = "buttonSaveAdminfail"
	$buttonSaveAdminfail.Size = '265, 23'
	$buttonSaveAdminfail.TabIndex = 16
	$buttonSaveAdminfail.Text = "Save List"
	$buttonSaveAdminfail.UseVisualStyleBackColor = $True
	$buttonSaveAdminfail.Visible = $False
	$buttonSaveAdminfail.add_Click($buttonSaveAdminfail_Click)
	#
	# buttonSavePingFail
	#
	$buttonSavePingFail.Location = '279, 327'
	$buttonSavePingFail.Name = "buttonSavePingFail"
	$buttonSavePingFail.Size = '265, 23'
	$buttonSavePingFail.TabIndex = 15
	$buttonSavePingFail.Text = "Save List"
	$buttonSavePingFail.UseVisualStyleBackColor = $True
	$buttonSavePingFail.Visible = $False
	$buttonSavePingFail.add_Click($buttonSavePingFail_Click)
	#
	# labelAdminRightsFailed
	#
	$labelAdminRightsFailed.Font = "Microsoft Sans Serif, 17pt"
	$labelAdminRightsFailed.Location = '281, 371'
	$labelAdminRightsFailed.Name = "labelAdminRightsFailed"
	$labelAdminRightsFailed.Size = '263, 30'
	$labelAdminRightsFailed.TabIndex = 14
	$labelAdminRightsFailed.Text = "Admin Rights Failed"
	$labelAdminRightsFailed.TextAlign = 'MiddleCenter'
	#
	# noadminlistbox
	#
	$noadminlistbox.FormattingEnabled = $True
	$noadminlistbox.Location = '281, 406'
	$noadminlistbox.Name = "noadminlistbox"
	$noadminlistbox.Size = '263, 147'
	$noadminlistbox.TabIndex = 13
	#
	# labelPingFailed
	#
	$labelPingFailed.Font = "Microsoft Sans Serif, 17pt"
	$labelPingFailed.Location = '281, 141'
	$labelPingFailed.Name = "labelPingFailed"
	$labelPingFailed.Size = '263, 30'
	$labelPingFailed.TabIndex = 12
	$labelPingFailed.Text = "Ping Failed"
	$labelPingFailed.TextAlign = 'MiddleCenter'
	#
	# nopinglistbox
	#
	$nopinglistbox.FormattingEnabled = $True
	$nopinglistbox.Location = '281, 174'
	$nopinglistbox.Name = "nopinglistbox"
	$nopinglistbox.Size = '263, 147'
	$nopinglistbox.TabIndex = 11
	#
	# logbuttonbrowse
	#
	$logbuttonbrowse.Location = '243, 62'
	$logbuttonbrowse.Name = "logbuttonbrowse"
	$logbuttonbrowse.Size = '30, 20'
	$logbuttonbrowse.TabIndex = 10
	$logbuttonbrowse.Text = "..."
	$logbuttonbrowse.UseVisualStyleBackColor = $True
	$logbuttonbrowse.add_Click($logbuttonbrowse_Click)
	#
	# logtextbox
	#
	$logtextbox.Location = '10, 63'
	$logtextbox.Name = "logtextbox"
	$logtextbox.Size = '228, 20'
	$logtextbox.TabIndex = 9
	#
	# labelLogFile
	#
	$labelLogFile.Font = "Microsoft Sans Serif, 17pt"
	$labelLogFile.Location = '30, 24'
	$labelLogFile.Name = "labelLogFile"
	$labelLogFile.Size = '227, 35'
	$labelLogFile.TabIndex = 8
	$labelLogFile.Text = "Log File
"
	$labelLogFile.TextAlign = 'MiddleCenter'
	#
	# ValConBUT
	#
	$ValConBUT.BackColor = 'Control'
	$ValConBUT.ForeColor = 'ControlText'
	$ValConBUT.Location = '12, 587'
	$ValConBUT.Name = "ValConBUT"
	$ValConBUT.Size = '264, 23'
	$ValConBUT.TabIndex = 7
	$ValConBUT.Text = "Validate Connections"
	$ValConBUT.UseVisualStyleBackColor = $False
	$ValConBUT.add_Click($ValConBUT_Click)
	#
	# addManBUT
	#
	$addManBUT.Enabled = $False
	$addManBUT.Location = '221, 560'
	$addManBUT.Name = "addManBUT"
	$addManBUT.Size = '55, 20'
	$addManBUT.TabIndex = 6
	$addManBUT.Text = "Add"
	$addManBUT.UseVisualStyleBackColor = $True
	$addManBUT.add_Click($addManBUT_Click)
	#
	# ManSerTBX
	#
	$ManSerTBX.Location = '13, 560'
	$ManSerTBX.Name = "ManSerTBX"
	$ManSerTBX.Size = '202, 20'
	$ManSerTBX.TabIndex = 5
	$ManSerTBX.Text = "Enter Servers Manually Here"
	$ManSerTBX.add_Click($ManSerTBX_Click)
	#
	# labelServerList
	#
	$labelServerList.Font = "Microsoft Sans Serif, 17pt"
	$labelServerList.Location = '12, 141'
	$labelServerList.Name = "labelServerList"
	$labelServerList.Size = '263, 30'
	$labelServerList.TabIndex = 4
	$labelServerList.Text = "Server List"
	$labelServerList.TextAlign = 'MiddleCenter'
	#
	# serverlistbox
	#
	$serverlistbox.BackColor = 'Menu'
	$serverlistbox.FormattingEnabled = $True
	$serverlistbox.Location = '10, 175'
	$serverlistbox.Name = "serverlistbox"
	$serverlistbox.Size = '263, 379'
	$serverlistbox.TabIndex = 3
	$serverlistbox.ThreeDCheckBoxes = $True
	$serverlistbox.add_SelectedValueChanged($serverlistbox_SelectedValueChanged)
	#
	# labelServersFile
	#
	$labelServersFile.Font = "Microsoft Sans Serif, 17pt"
	$labelServersFile.Location = '27, 85'
	$labelServersFile.Name = "labelServersFile"
	$labelServersFile.Size = '227, 31'
	$labelServersFile.TabIndex = 2
	$labelServersFile.Text = "Servers File"
	$labelServersFile.TextAlign = 'MiddleCenter'
	#
	# serlstbuttonBrowse
	#
	$serlstbuttonBrowse.Location = '244, 119'
	$serlstbuttonBrowse.Name = "serlstbuttonBrowse"
	$serlstbuttonBrowse.Size = '30, 20'
	$serlstbuttonBrowse.TabIndex = 1
	$serlstbuttonBrowse.Text = "..."
	$serlstbuttonBrowse.UseVisualStyleBackColor = $True
	$serlstbuttonBrowse.add_Click($serlstbuttonBrowse_Click)
	#
	# serlsttextbox
	#
	$serlsttextbox.AutoCompleteMode = 'SuggestAppend'
	$serlsttextbox.AutoCompleteSource = 'FileSystem'
	$serlsttextbox.Location = '10, 119'
	$serlsttextbox.Name = "serlsttextbox"
	$serlsttextbox.Size = '228, 20'
	$serlsttextbox.TabIndex = 0
	$serlsttextbox.add_TextChanged($serlsttextbox_TextChanged)
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = "txt"
	$openfiledialog1.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$openfiledialog1.ShowHelp = $True
	#
	# savefiledialog1
	#
	$savefiledialog1.CreatePrompt = $True
	$savefiledialog1.DefaultExt = "csv"
	#
	# timerFadeIn
	#
	$timerFadeIn.add_Tick($timerFadeIn_Tick)
	$serviceGroup.ResumeLayout()
	$formChangeServiceAccount.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formChangeServiceAccount.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formChangeServiceAccount.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formChangeServiceAccount.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formChangeServiceAccount.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-ServiceAccountPassword_psf | Out-Null
	#Perform cleanup
	OnApplicationExit
}
